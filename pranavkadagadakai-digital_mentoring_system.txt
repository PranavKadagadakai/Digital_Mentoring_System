Directory structure:
└── pranavkadagadakai-digital_mentoring_system/
    ├── README.md
    ├── manage.py
    ├── pyproject.toml
    ├── requirements.txt
    ├── .python-version
    ├── core/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── forms.py
    │   ├── models.py
    │   ├── tests.py
    │   ├── urls.py
    │   ├── utils.py
    │   └── views.py
    ├── Digital_Mentoring_System/
    │   ├── __init__.py
    │   ├── asgi.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    ├── static/
    │   ├── css/
    │   │   └── styles.css
    │   └── js/
    │       └── script.js
    └── templates/
        └── core/
            ├── base.html
            ├── dashboard.html
            ├── grade_card.html
            ├── input_marks.html
            ├── landing_page.html
            ├── login.html
            ├── mentor_analysis.html
            ├── profile.html
            ├── register.html
            ├── result_analysis.html
            └── scoreboard.html

================================================
FILE: README.md
================================================
[Empty file]


================================================
FILE: manage.py
================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Digital_Mentoring_System.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



================================================
FILE: pyproject.toml
================================================
[project]
name = "digital-mentoring-system"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "asgiref>=3.10.0",
    "contourpy>=1.3.3",
    "cycler>=0.12.1",
    "django>=5.2.7",
    "fonttools>=4.60.1",
    "kiwisolver>=1.4.9",
    "matplotlib>=3.10.6",
    "numpy>=2.3.3",
    "packaging>=25.0",
    "pillow>=11.3.0",
    "pyparsing>=3.2.5",
    "python-dateutil>=2.9.0.post0",
    "six>=1.17.0",
    "sqlparse>=0.5.3",
]



================================================
FILE: requirements.txt
================================================
asgiref==3.8.1
contourpy==1.3.1
cycler==0.12.1
Django==5.1.6
fonttools==4.56.0
kiwisolver==1.4.8
matplotlib==3.10.0
numpy==2.2.2
packaging==24.2
pillow==11.1.0
pyparsing==3.2.1
python-dateutil==2.9.0.post0
six==1.17.0
sqlparse==0.5.3



================================================
FILE: .python-version
================================================
3.12



================================================
FILE: core/__init__.py
================================================
[Empty file]


================================================
FILE: core/admin.py
================================================
from django.contrib import admin

# Register your models here.



================================================
FILE: core/apps.py
================================================
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'



================================================
FILE: core/forms.py
================================================
from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import User

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2', 'role']

class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'full_name', 'usn', 'phone_number', 'profile_photo']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'full_name': forms.TextInput(attrs={'class': 'form-control'}),
            'usn': forms.TextInput(attrs={'class': 'form-control'}),
            'phone_number': forms.TextInput(attrs={'class': 'form-control'}),
        }


================================================
FILE: core/models.py
================================================
# models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    ROLE_CHOICES = [
        ('student', 'Student'),
        ('mentor', 'Mentor'),
        ('admin', 'Admin'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    usn = models.CharField(max_length=11, blank=True, null=True)
    full_name = models.CharField(max_length=50, blank=True, null=True)
    phone_number = models.CharField(max_length=15, blank=True, null=True)
    profile_photo = models.ImageField(upload_to='profiles/', blank=True, null=True)

class Course(models.Model):
    course_code = models.CharField(max_length=10, unique=True)
    course_name = models.CharField(max_length=100)
    credits = models.IntegerField()

class PerformanceAnalytics(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    semester = models.IntegerField()
    sgpa = models.FloatField()
    cgpa = models.FloatField()
    
class Marks(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    semester = models.IntegerField()
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    marks = models.FloatField()
    grade = models.CharField(max_length=2, blank=True, null=True)
    grade_points = models.IntegerField(blank=True, null=True)
    credit_points = models.IntegerField(blank=True, null=True)

    class Meta:
        unique_together = ('student', 'semester', 'course')

    def save(self, *args, **kwargs):
        self.grade, self.grade_points = self.calculate_grade(self.marks)
        self.credit_points = self.grade_points * self.course.credits
        
        super().save(*args, **kwargs)

        # Update Performance Analytics
        self.update_performance_analytics()

    def update_performance_analytics(self):
        """ Update SGPA for the current semester and CGPA overall. """
        student = self.student
        semester = self.semester

        # Fetch all marks for the student in the semester
        marks_entries = Marks.objects.filter(student=student, semester=semester)
        total_credits = sum(entry.course.credits for entry in marks_entries)
        total_credit_points = sum(entry.credit_points for entry in marks_entries)

        # Compute SGPA
        sgpa = round(total_credit_points / total_credits, 2) if total_credits else 0.0

        # Compute CGPA
        all_marks = Marks.objects.filter(student=student)
        all_total_credits = sum(entry.course.credits for entry in all_marks)
        all_total_credit_points = sum(entry.credit_points for entry in all_marks)
        cgpa = round(all_total_credit_points / all_total_credits) if all_total_credits > 0 else 0

        # Update PerformanceAnalytics Table
        PerformanceAnalytics.objects.update_or_create(
            student=student, semester=semester,
            defaults={'sgpa': round(sgpa, 2), 'cgpa': round(cgpa, 2)}
        )

    @staticmethod
    def calculate_grade(marks):
        if marks > 89:
            return 'O', 10
        elif marks > 79:
            return 'A+', 9
        elif marks > 69:
            return 'A', 8
        elif marks > 59:
            return 'B+', 7
        elif marks > 54:
            return 'B', 6
        elif marks > 49:
            return 'C', 5
        elif marks > 39:
            return 'P', 4
        else:
            return 'F', 0

class NonCreditCourse(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    course_name = models.CharField(max_length=100)
    grade = models.CharField(max_length=2)

class MentorAssignment(models.Model):
    mentor = models.ForeignKey(User, on_delete=models.CASCADE, related_name='assigned_students')
    student = models.ForeignKey(User, on_delete=models.CASCADE, related_name='assigned_mentor')


================================================
FILE: core/tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
FILE: core/urls.py
================================================
from django.urls import path
from django.contrib.auth.views import LogoutView
from . import views

urlpatterns = [
    path('', views.landing_page, name='landing_page'),
    path('register/', views.register, name='register'),
    path('login/', views.custom_login, name='login'),
    path('logout/', LogoutView.as_view(next_page='login'), name='logout'),
    path('dashboard/', views.dashboard, name='dashboard'),
    path('scoreboard/', views.scoreboard, name='scoreboard'),
    path('input-marks/', views.input_marks, name='input_marks'),
    path('grade-card/<int:student_id>/', views.grade_card, name='grade_card'),
    path('result-analysis/', views.result_analysis, name='result_analysis'),
    path('assign-mentor/', views.assign_mentor, name='assign_mentor'),
    path('profile/', views.profile, name='profile'),
]


================================================
FILE: core/utils.py
================================================
from .models import Marks

def calculate_sgpa(student, semester):
    marks = Marks.objects.filter(student=student, semester=semester)
    total_credit_points = sum(m.credit_points for m in marks)
    total_credits = sum(m.course.credits for m in marks)
    return round(total_credit_points / total_credits, 2) if total_credits else 0.0

def calculate_cgpa(student):
    marks = Marks.objects.filter(student=student)
    total_credit_points = sum(m.credit_points for m in marks if m.grade != 'F')
    total_credits = sum(m.course.credits for m in marks if m.grade != 'F')
    return round(total_credit_points / total_credits, 2) if total_credits else 0.0


================================================
FILE: core/views.py
================================================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import CustomUserCreationForm, ProfileUpdateForm
from .models import Marks, Course, NonCreditCourse, User, PerformanceAnalytics, MentorAssignment
from .utils import calculate_sgpa, calculate_cgpa
import matplotlib.pyplot as plt
import io
import base64
from django.http import HttpResponse
from django.db import IntegrityError

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('dashboard')
    else:
        form = CustomUserCreationForm()
    return render(request, 'core/register.html', {'form': form})

def custom_login(request):
    error_message = None
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('dashboard')
        else:
            error_message = "Invalid username or password."
    return render(request, 'core/login.html', {'error_message': error_message})

def landing_page(request):
    if request.user.is_authenticated:
        return redirect('dashboard')
    return render(request, 'core/landing_page.html')

@login_required
def profile(request):
    user = request.user
    if request.method == 'POST':
        form = ProfileUpdateForm(request.POST, request.FILES, instance=user)
        if form.is_valid():
            form.save()
            messages.success(request, "Profile updated successfully!")
            return redirect('profile')
    else:
        form = ProfileUpdateForm(instance=user)
    
    return render(request, 'core/profile.html', {'form': form})

@login_required
def dashboard(request):
    user = request.user
    context = {
        'name': user.full_name,
        'usn': user.usn,
        'phone_number': user.phone_number,
        'profile_photo': user.profile_photo.url if user.profile_photo else None,
        'role': user.role,
    }

    if user.role == 'student':
        context['scoreboard'] = Marks.objects.filter(student=user)
        context['grade_card'] = PerformanceAnalytics.objects.filter(student=user)
        context['semesters'] = sorted(set(Marks.objects.filter(student=user).values_list('semester', flat=True)))
    elif user.role == 'mentor':
        assigned_students = MentorAssignment.objects.filter(mentor=user).values_list('student', flat=True)
        students = User.objects.filter(id__in=assigned_students)
        context['students'] = students
        context['semesters'] = sorted(set(Marks.objects.filter(student__in=students).values_list('semester', flat=True)))
        context['can_input_marks'] = True
    elif user.role == 'admin':
        context['students'] = User.objects.filter(role='student')
        context['mentors'] = User.objects.filter(role='mentor')
        context['assignments'] = MentorAssignment.objects.all()

    return render(request, 'core/dashboard.html', context)

@login_required
def scoreboard(request):
    student = request.user
    semesters = set(Marks.objects.filter(student=student).values_list('semester', flat=True))
    semester_data = []
    for semester in semesters:
        sgpa = calculate_sgpa(student, semester)
        courses = Marks.objects.filter(student=student, semester=semester)
        semester_data.append({'semester': semester, 'sgpa': sgpa, 'courses': courses})
    cgpa = calculate_cgpa(student)
    return render(request, 'core/scoreboard.html', {'semester_data': semester_data, 'cgpa': cgpa})

@login_required
def input_marks(request):
    if request.method == 'POST':
        student_id = request.POST.get('student_id')
        semester = request.POST.get('semester')
        courses_data = zip(
            request.POST.getlist('course_code'),
            request.POST.getlist('course_name'),
            map(int, request.POST.getlist('credits')),
            map(float, request.POST.getlist('marks'))
        )

        student = get_object_or_404(User, id=student_id)
        
        for course_code, course_name, credits, marks in courses_data:
            course, created = Course.objects.get_or_create(
                course_code=course_code,
                defaults={'course_name': course_name, 'credits': credits}
            )
            try:
                Marks.objects.update_or_create(
                    student=student,
                    semester=semester,
                    course=course,
                    defaults={'marks': marks}
                )
            except IntegrityError:
                continue  # Handle duplicate course entries gracefully

        return redirect('grade_card', student_id=student.id)

    students = User.objects.filter(role='student')
    return render(request, 'core/input_marks.html', {'students': students})

@login_required
def assign_mentor(request):
    if request.user.role != 'admin':
        return redirect('dashboard')
    if request.method == 'POST':
        mentor_id = request.POST.get('mentor')
        student_id = request.POST.get('student')
        mentor = get_object_or_404(User, id=mentor_id, role='mentor')
        student = get_object_or_404(User, id=student_id, role='student')
        MentorAssignment.objects.create(mentor=mentor, student=student)
        return redirect('dashboard')
    return render(request, 'core/assign_mentor.html', {'mentors': User.objects.filter(role='mentor'), 'students': User.objects.filter(role='student')})

@login_required
def grade_card(request, student_id = None, semester=None):
    student = get_object_or_404(User, id=student_id)
    semesters = sorted(set(Marks.objects.filter(student=student).values_list('semester', flat=True)))
    selected_semester = request.GET.get('semester', semesters[0] if semesters else None)
    marks = Marks.objects.filter(student=student, semester=selected_semester)
    non_credit_courses = NonCreditCourse.objects.filter(student=student)
    total_credits = sum(mark.course.credits for mark in marks)
    total_credit_points = sum(mark.credit_points for mark in marks)
    sgpa = total_credit_points / total_credits if total_credits > 0 else 0
    cgpa = calculate_cgpa(student=student)
    return render(request, 'core/grade_card.html', {
        'student': student,
        'semesters': semesters,
        'selected_semester': int(selected_semester) if selected_semester else None,
        'marks': marks,
        'non_credit_courses': non_credit_courses,
        'sgpa': round(sgpa, 2),
        'cgpa': round(cgpa, 2)
    })

def generate_student_graph(student):
    semesters = PerformanceAnalytics.objects.filter(student=student).order_by('semester')
    sem_numbers = [sem.semester for sem in semesters]
    sgpa_values = [sem.sgpa for sem in semesters]
    
    plt.figure(figsize=(8,5))
    plt.bar(sem_numbers, sgpa_values, color='blue')
    plt.xlabel('Semester')
    plt.ylabel('SGPA')
    plt.title(f'SGPA Trend for {student.full_name}')
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    graph = base64.b64encode(buf.getvalue()).decode('utf-8')
    buf.close()
    return graph

def generate_mentor_graph(mentor):
    assigned_students = MentorAssignment.objects.filter(mentor=mentor).values_list('student', flat=True)
    students = User.objects.filter(id__in=assigned_students)
    
    student_names = []
    cgpa_values = []
    
    for student in students:
        analytics = PerformanceAnalytics.objects.filter(student=student).order_by('-semester').first()
        if analytics:
            student_names.append(student.full_name)
            cgpa_values.append(analytics.cgpa)
    
    plt.figure(figsize=(8,5))
    plt.bar(student_names, cgpa_values, color='green')
    plt.xlabel('Students')
    plt.ylabel('CGPA')
    plt.title('Mentor’s Students CGPA Comparison')
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    graph = base64.b64encode(buf.getvalue()).decode('utf-8')
    buf.close()
    return graph

@login_required
def result_analysis(request):
    user = request.user
    if user.role == 'student':
        graph = generate_student_graph(user)
        return render(request, 'core/result_analysis.html', {'graph': graph})
    
    elif user.role == 'mentor':
        assigned_students = MentorAssignment.objects.filter(mentor=user).values_list('student', flat=True)
        students = User.objects.filter(id__in=assigned_students)
        
        student_graphs = {student: generate_student_graph(student) for student in students}
        mentor_graph = generate_mentor_graph(user)
        return render(request, 'core/mentor_analysis.html', {'student_graphs': student_graphs, 'mentor_graph': mentor_graph})



================================================
FILE: Digital_Mentoring_System/__init__.py
================================================
[Empty file]


================================================
FILE: Digital_Mentoring_System/asgi.py
================================================
"""
ASGI config for Digital_Mentoring_System project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Digital_Mentoring_System.settings')

application = get_asgi_application()



================================================
FILE: Digital_Mentoring_System/settings.py
================================================
"""
Django settings for Digital_Mentoring_System project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5ss0-hx__9+zf!d)cv*l@n*qhvo=f7d4lvb1*r3ltdh3$oo2-v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Digital_Mentoring_System.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Digital_Mentoring_System.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## MANUAL CHANGES
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

AUTH_USER_MODEL = 'core.User'



================================================
FILE: Digital_Mentoring_System/urls.py
================================================
"""
URL configuration for Digital_Mentoring_System project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls'))
]



================================================
FILE: Digital_Mentoring_System/wsgi.py
================================================
"""
WSGI config for Digital_Mentoring_System project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Digital_Mentoring_System.settings')

application = get_wsgi_application()



================================================
FILE: static/css/styles.css
================================================
/* General Styles */
body {
    font-family: 'Poppins', sans-serif;
    background-color: #f8f9fa;
    color: #343a40;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 800px;
    margin: auto;
    padding: 20px;
}

/* Form Styles */
.form-container {
    background: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    font-weight: 600;
    display: block;
    margin-bottom: 5px;
}

input[type="text"],
input[type="email"],
input[type="password"],
input[type="number"],
select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 5px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    cursor: pointer;
    transition: background 0.3s ease-in-out;
}

button:hover {
    background-color: #0056b3;
}

/* Profile Page */
.profile-photo {
    display: block;
    margin: 10px auto;
    border-radius: 50%;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
}

/* Alerts */
.alert {
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
}

/* Scoreboard */
.card {
    border: none;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
}

.card-header {
    background-color: #007bff;
    color: white;
    padding: 10px 15px;
    font-weight: bold;
}

.card-body {
    padding: 15px;
}

/* Tables */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

th, td {
    padding: 10px;
    border: 1px solid #dee2e6;
    text-align: left;
}

th {
    background-color: #007bff;
    color: white;
}

/* Graph Images */
img.img-fluid {
    max-width: 100%;
    height: auto;
    border-radius: 5px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.15);
}

/* Landing Page */
h2 {
    text-align: center;
    font-weight: bold;
    color: #0056b3;
}

p {
    text-align: center;
    font-size: 16px;
}

a {
    color: #007bff;
    text-decoration: none;
    font-weight: bold;
}

a:hover {
    text-decoration: underline;
}



================================================
FILE: static/js/script.js
================================================
document.addEventListener('DOMContentLoaded', () => {
    console.log("SGPA Chart script loaded successfully!");
    const errorMessage = document.getElementById("error-message");
    const loadingMessage = document.getElementById("loading-message");
    const chartElement = document.getElementById("sgpaChart");
    let sgpaChart = null; // Store chart instance to update instead of recreating

    async function fetchData() {
        console.log("Fetching data from /result-analysis/...");
    
        try {
            const response = await fetch('/result-analysis/');
            console.log("Response received:", response);
    
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
    
            const data = await response.json();
            console.log("Parsed data:", data);
    
            if (data.error) {
                showError(data.error);
                return;
            }
    
            if (!Array.isArray(data.semesters) || !Array.isArray(data.sgpa) || data.semesters.length === 0) {
                showError("No data available to display.");
                return;
            }
    
            updateChart(data.semesters, data.sgpa);
        } catch (error) {
            console.error("Error fetching data:", error);
            showError("Error loading data. Please try again.");
        }
    }    

    function showError(message) {
        errorMessage.innerText = message;
        errorMessage.style.display = "block";
        loadingMessage.style.display = "none"; // Hide loading if there's an error
    }

    function updateChart(semesters, sgpa) {
        const ctx = chartElement.getContext("2d");

        if (sgpaChart instanceof Chart) {
            sgpaChart.destroy(); // Destroy only if it's a valid Chart.js object
        }

        sgpaChart = new Chart(ctx, {
            type: "bar",
            data: {
                labels: semesters.map(sem => `Semester ${sem}`),
                datasets: [{
                    label: "SGPA",
                    data: sgpa,
                    backgroundColor: "rgba(54, 162, 235, 0.6)",
                    borderColor: "rgba(54, 162, 235, 1)",
                    borderWidth: 1,
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 10,
                        title: {
                            display: true,
                            text: 'SGPA'
                        }
                    },
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem) => `SGPA: ${tooltipItem.raw.toFixed(2)}`,
                        },
                    },
                    title: {
                        display: true,
                        text: 'Semester-wise Performance'
                    }
                },
            },
        });
    }

    fetchData(); // Fetch data when the page loads
});



================================================
FILE: templates/core/base.html
================================================
{% load static %}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{% block title %}Digital Mentoring System{% endblock %}</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <link rel="stylesheet" href="{% static "css/styles.css" %}" />
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
      <div class="container">
        <a class="navbar-brand fw-bold" href="{% url 'landing_page' %}">
          Digital Mentoring System
        </a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
          aria-controls="navbarNav"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto">
            {% if user.is_authenticated %}
            <li class="nav-item">
              <a class="nav-link text-white" href="{% url 'landing_page' %}"
                >Dashboard</a
              >
            </li>
            <li class="nav-item">
              <a class="nav-link text-white" href="{% url 'profile' %}"
                >Profile</a
              >
            </li>
            <li class="nav-item">
              <form
                action="{% url 'logout' %}"
                method="post"
                style="display: inline"
              >
                {% csrf_token %}
                <button type="submit" class="btn btn-link text-white">
                  Logout
                </button>
              </form>
            </li>
            {% else %}
            <li class="nav-item">
              <a class="nav-link text-white" href="{% url 'login' %}">Login</a>
            </li>
            <li class="nav-item">
              <a class="nav-link text-white" href="{% url 'register' %}"
                >Register</a
              >
            </li>
            {% endif %}
          </ul>
        </div>
      </div>
    </nav>
    <div class="container mt-4">{% block content %}{% endblock %}</div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>



================================================
FILE: templates/core/dashboard.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="dashboard-container">
  <h2 class="text-center">Welcome, {{ name }}</h2>

  <div class="profile-card">
    {% if profile_photo %}
    <img src="{{ profile_photo }}" alt="Profile Photo" class="profile-img" />
    {% endif %}
    <p><strong>Phone Number:</strong> {{ phone_number }}</p>
    {% if role == 'student' %}
    <p><strong>USN:</strong> {{ usn }}</p>
    {% endif %}
  </div>

  {% if role == 'student' %}
  <div class="card">
    <h3>Your Scoreboard</h3>
    <a href="{% url 'scoreboard' %}" class="btn btn-primary"
      >View Scoreboard</a
    >
  </div>

  <div class="card">
    <h3>Your Grade Card</h3>
    <a href="{% url 'grade_card' request.user.id %}" class="btn btn-primary"
      >View Grade Card</a
    >
  </div>

  <div class="card">
    <h3>Performance Analysis</h3>
    <a href="{% url 'result_analysis' %}" class="btn btn-secondary"
      >View Performance Analysis</a
    >
  </div>

  {% elif role == 'mentor' %}
  <div class="card">
    <h3>Your Assigned Students</h3>
    <ul class="list-group">
      {% for student in students %}
      <li
        class="list-group-item d-flex justify-content-between align-items-center"
      >
        {{ student.full_name }} ({{ student.username }})
        <span>
          <a href="{% url 'input_marks' %}" class="btn btn-sm btn-warning"
            >Input Marks</a
          >
          <a
            href="{% url 'grade_card' student.id %}"
            class="btn btn-sm btn-info"
            >View Grade Card</a
          >
        </span>
      </li>
      {% endfor %}
    </ul>
  </div>

  <div class="card">
    <h3>Student Performance</h3>
    <a href="{% url 'result_analysis' %}" class="btn btn-secondary"
      >View Student Performance Analysis</a
    >
  </div>

  {% elif role == 'admin' %}
  <div class="card">
    <h3>Assign Students to Mentors</h3>
    <form method="post" action="{% url 'assign_mentor' %}" class="form-group">
      {% csrf_token %}
      <label for="mentor">Select Mentor:</label>
      <select name="mentor" class="form-control">
        {% for mentor in mentors %}
        <option value="{{ mentor.id }}">{{ mentor.username }}</option>
        {% endfor %}
      </select>

      <label for="student">Select Student:</label>
      <select name="student" class="form-control">
        {% for student in students %}
        <option value="{{ student.id }}">{{ student.username }}</option>
        {% endfor %}
      </select>

      <button type="submit" class="btn btn-success mt-2">Assign</button>
    </form>
  </div>
  {% endif %}
</div>
{% endblock %}



================================================
FILE: templates/core/grade_card.html
================================================
{% extends 'core/base.html' %} 
{% block content %}
<div class="grade-card-container">
    <h2 class="text-center">Grade Card - {{ student.full_name }}</h2>
    <h3 class="text-center text-success">CGPA: {{ cgpa }}</h3>

    <form method="get" class="semester-form">
        <label for="semester">Select Semester:</label>
        <select name="semester" id="semester" class="form-control" onchange="this.form.submit()">
            {% for sem in semesters %}
                <option value="{{ sem }}" {% if sem == selected_semester %}selected{% endif %}>Semester {{ sem }}</option>
            {% endfor %}
        </select>
    </form>

    <p class="text-center">Selected Semester: <strong>{{ selected_semester }}</strong></p>

    <div class="table-responsive">
        <table class="table table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th>Course</th>
                    <th>Marks</th>
                    <th>Grade</th>
                    <th>Grade Points</th>
                    <th>Credit Points</th>
                </tr>
            </thead>
            <tbody>
                {% for mark in marks %}
                    <tr>
                        <td>{{ mark.course.course_name }}</td>
                        <td>{{ mark.marks }}</td>
                        <td>{{ mark.grade }}</td>
                        <td>{{ mark.grade_points }}</td>
                        <td>{{ mark.credit_points }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <h3 class="text-center text-primary">SGPA: {{ sgpa }}</h3>
</div>
{% endblock %}



================================================
FILE: templates/core/input_marks.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h2 class="text-center">Input Marks</h2>
  <form method="post" class="form-container">
    {% csrf_token %}
    <div class="form-group">
      <label for="student_id">Student:</label>
      <select name="student_id" class="form-control" required>
        {% for student in students %}
        <option value="{{ student.id }}">{{ student.username }}</option>
        {% endfor %}
      </select>
    </div>

    <div class="form-group">
      <label for="semester">Semester:</label>
      <input type="number" name="semester" class="form-control" required />
    </div>

    <div id="course-container">
      <div class="course-input form-group">
        <label for="course_code">Course Code:</label>
        <input type="text" name="course_code" class="form-control" required />

        <label for="course_name">Course Name:</label>
        <input type="text" name="course_name" class="form-control" required />

        <label for="credits">Credits:</label>
        <input type="number" name="credits" class="form-control" required />

        <label for="marks">Marks:</label>
        <input type="number" name="marks" class="form-control" required />
      </div>
    </div>

    <button type="button" class="btn btn-secondary mt-3" onclick="addCourse()">
      Add Another Course
    </button>
    <button type="submit" class="btn btn-primary mt-3">Submit</button>
  </form>
</div>

<script>
  function addCourse() {
    let container = document.getElementById("course-container");
    let newInput = document.querySelector(".course-input").cloneNode(true);
    container.appendChild(newInput);
  }
</script>
{% endblock %}



================================================
FILE: templates/core/landing_page.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="text-center">
  <h2>Welcome to the Digital Mentoring System</h2>
  <p>
    Please <a href="{% url 'login' %}" class="btn btn-primary">Login</a> or
    <a href="{% url 'register' %}" class="btn btn-secondary">Register</a> to
    continue.
  </p>
</div>
{% endblock %}



================================================
FILE: templates/core/login.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h2 class="text-center">Login</h2>
  {% if error_message %}
  <p class="alert alert-danger text-center">{{ error_message }}</p>
  {% endif %}
  <form method="post" class="form-container">
    {% csrf_token %}
    <div class="form-group">
      <input
        type="text"
        name="username"
        class="form-control"
        placeholder="Username"
        required
      />
    </div>
    <div class="form-group">
      <input
        type="password"
        name="password"
        class="form-control"
        placeholder="Password"
        required
      />
    </div>
    <button type="submit" class="btn btn-primary btn-block">Login</button>
  </form>
</div>
{% endblock %}



================================================
FILE: templates/core/mentor_analysis.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h2 class="text-center">Mentor's Student Performance Analysis</h2>

  <!-- Mentor Graph -->
  {% if mentor_graph %}
  <h3 class="text-center">Overall CGPA Comparison</h3>
  <div class="text-center">
    <img
      src="data:image/png;base64,{{ mentor_graph }}"
      alt="Mentor Analysis Graph"
      class="img-fluid rounded shadow"
    />
  </div>
  {% else %}
  <p class="text-center text-muted">No data available for mentor's analysis.</p>
  {% endif %}

  <hr />

  <!-- Student SGPA Graphs -->
  <h3 class="text-center">Individual Student SGPA Trends</h3>
  {% if student_graphs %} {% for student, graph in student_graphs.items %}
  <div class="text-center">
    <h4>{{ student.full_name }}</h4>
    <img
      src="data:image/png;base64,{{ graph }}"
      alt="SGPA Graph for {{ student.full_name }}"
      class="img-fluid rounded shadow"
    />
  </div>
  <hr />
  {% endfor %} {% else %}
  <p class="text-center text-muted">
    No student data available for graph generation.
  </p>
  {% endif %}
</div>
{% endblock %}



================================================
FILE: templates/core/profile.html
================================================
{% extends "core/base.html" %} {% block content %}
<div class="container">
  <h2 class="text-center">Edit Profile</h2>

  {% if messages %} {% for message in messages %}
  <p class="alert alert-success">{{ message }}</p>
  {% endfor %} {% endif %}

  <form method="POST" enctype="multipart/form-data" class="form-container">
    {% csrf_token %}

    <div class="form-group">
      <label for="id_username">Username</label>
      {{ form.username }}
    </div>

    <div class="form-group">
      <label for="id_email">Email</label>
      {{ form.email }}
    </div>

    <div class="form-group">
      <label for="id_full_name">Full Name</label>
      {{ form.full_name }}
    </div>

    <div class="form-group">
      <label for="id_phone_number">Phone Number</label>
      {{ form.phone_number }}
    </div>

    {% if user.role == 'student' %}
    <div class="form-group">
      <label for="id_usn">USN</label>
      {{ form.usn }}
    </div>
    {% endif %}

    <div class="form-group">
      <label for="id_profile_photo">Profile Photo</label><br />
      {% if request.user.profile_photo %}
      <img
        src="{{ request.user.profile_photo.url }}"
        alt="Profile Photo"
        width="100"
        class="rounded-circle shadow"
      /><br />
      {% endif %} {{ form.profile_photo }}
    </div>

    <button type="submit" class="btn btn-primary btn-block">
      Save Changes
    </button>
  </form>
</div>
{% endblock %}



================================================
FILE: templates/core/register.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h2 class="text-center">Register</h2>
  <form method="post" class="form-container">
    {% csrf_token %} {{ form.as_p }}
    <button type="submit" class="btn btn-primary btn-block">Register</button>
  </form>
</div>
{% endblock %}



================================================
FILE: templates/core/result_analysis.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h2 class="text-center">Semester-wise SGPA Analysis</h2>
  {% if graph %}
  <div class="text-center">
    <img
      src="data:image/png;base64,{{ graph }}"
      alt="SGPA Graph"
      class="img-fluid rounded shadow"
    />
  </div>
  {% else %}
  <p class="text-center text-muted">No data available to generate the graph.</p>
  {% endif %}
</div>
{% endblock %}



================================================
FILE: templates/core/scoreboard.html
================================================
{% extends 'core/base.html' %} {% block content %}
<div class="container">
  <h1 class="text-center">Scoreboard</h1>

  {% for semester in semester_data %}
  <div class="card mt-4">
    <div class="card-header">
      <h2>Semester {{ semester.semester }}</h2>
      <p class="mb-0"><strong>SGPA:</strong> {{ semester.sgpa }}</p>
    </div>
    <div class="card-body">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Course</th>
            <th>Marks</th>
            <th>Grade</th>
            <th>Grade Points</th>
          </tr>
        </thead>
        <tbody>
          {% for course in semester.courses %}
          <tr>
            <td>{{ course.course.course_name }}</td>
            <td>{{ course.marks }}</td>
            <td>{{ course.grade }}</td>
            <td>{{ course.grade_points }}</td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
  {% endfor %}

  <div class="text-center mt-4">
    <h2><strong>CGPA:</strong> {{ cgpa }}</h2>
  </div>
</div>
{% endblock %}


